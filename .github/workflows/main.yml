name: CI

on:
  release:
    types: [ created ]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to build'
        required: true
        default: '0.103.0'
concurrency:
  group: ${{ github.ref }}-gn
  cancel-in-progress: false

jobs:
  is-latest:
    name: "Is Latest"
    runs-on: ubuntu-latest
    outputs:
      nw: ${{ steps.set_nw.outputs.nw }}
      chromium: ${{ steps.set_nw.outputs.chromium }}
      commit: ${{ steps.set_nw.outputs.commit }}
      avcodec: ${{ steps.set_nw.outputs.avcodec }}
      avformat: ${{ steps.set_nw.outputs.avformat }}
      avutil: ${{ steps.set_nw.outputs.avutil }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Check if latest
        working-directory: .github/workflows
        run: true #bash ./is_latest.sh ${{ github.event_name }}
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
      - name: Write NW version to env and set output
        id: set_nw
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "nw=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            NW_VERSION=$(curl -s https://nwjs.io/versions.json | jq -r '.latest' | sed 's/v//')
            echo "nw=$NW_VERSION" >> $GITHUB_OUTPUT
          fi
          CHROMIUM=$(curl -s https://nwjs.io/versions.json | jq -r ".versions[] | select(.version==\"v$NW_VERSION\") | .components.chromium")
          echo "chromium=$CHROMIUM" >> $GITHUB_OUTPUT
          _commit=$(curl -sL https://chromium.googlesource.com/chromium/src.git/+/refs/tags/${CHROMIUM}/DEPS?format=TEXT | base64 -d | grep -oP "'ffmpeg_revision': '\K[0-9a-f]{40}'" | tr -d \')
           echo "commit=$_commit" >> $GITHUB_OUTPUT
          _url=https://chromium.googlesource.com/chromium/third_party/ffmpeg
          SO=$(curl -sL ${_url}/+/${_commit}/libavcodec/version_major.h?format=TEXT|base64 -d | grep -oP 'LIBAVCODEC_VERSION_MAJOR\s+\K\d+')
          echo "avcodec=$SO" >> $GITHUB_OUTPUT
          SO=$(curl -sL ${_url}/+/${_commit}/libavformat/version_major.h?format=TEXT|base64 -d | grep -oP 'LIBAVFORMAT_VERSION_MAJOR\s+\K\d+')
          echo "avformat=$SO" >> $GITHUB_OUTPUT
          SO=$(curl -sL ${_url}/+/${_commit}/libavutil/version.h?format=TEXT|base64 -d | grep -oP 'LIBAVUTIL_VERSION_MAJOR\s+\K\d+')
          echo "avutil=$SO" >> $GITHUB_OUTPUT

  build:
    needs: is-latest
    name: "Build for ${{ matrix.target }}"
    runs-on: ${{ matrix.host }}
    strategy:
      matrix:
        target: [linux-x64]
        include:
          - target: linux-x64
            host: ubuntu-latest
            soname: libffmpeg.so

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      #- name: Setup build tools
      #  run: ${{ matrix.setupcmd }}
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libcups2-dev
          mkdir -p /tmp/ff
          cd /tmp/ff
          curl -L https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+/latest -o gn.zip
          $(command -v bsdtar -xf|command -v unzip) gn.zip
          curl https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${{ needs.is-latest.outputs.chromium }}-lite.tar.xz | tar --strip-components=1 -xJf -
          export PATH+=":/tmp/ff" CC=clang CXX=clang++ AR=ar NM=nm
          python tools/rust/update_rust.py # should be system rust
          gn gen -v out/Default --fail-on-unused-args --script-executable=/usr/bin/python --args="is_debug=false is_component_ffmpeg=true proprietary_codecs=true is_official_build=true target_cpu=\"x64\" ffmpeg_branding=\"Chrome\""
          ninja -C out/Default ${{ matrix.soname }}
          strip -s out/Default/${{ matrix.soname }}
          zip -9 ${{ needs.is-latest.outputs.nw }}-${{ matrix.target }}-gn.zip out/Default/${{ matrix.soname }}
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.target }}
          path: '/tmp/ff/out/Default/*.zip'

  build-release:
    needs: [ is-latest, build ]
    name: "Build Release"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/download-artifact@v4.3.0
        with:
          # all: true
          path: release/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: release/

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/*/*.zip
          tag_name: ${{ needs.is-latest.outputs.nw }}
          body: |
            Chromium ${{ needs.is-latest.outputs.chromium }}
            Commit of chromium/third_pirty/ffmpeg ${{ needs.is-latest.outputs.commit }}
            avcodec${{ needs.is-latest.outputs.avcodec }}
            avformat${{ needs.is-latest.outputs.avformat }}
            avutil${{ needs.is-latest.outputs.avutil }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
